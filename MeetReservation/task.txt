x Criar um projeto .NET de API chamado meet-reservation

x Criar o BasEntity
    x Id (GUID)
    x CreateAt (Datetime)
    x UpdateAt (Datetime)

x Criar a class de RegisterMeetCommand
    x Responsible (String)
    x Room (Number)
    x StartTime (DateTime)
    x EndTime (DateTime)

x Criar a MeetEntity que herda de BasEntity
    x Responsible (String, required)
    x Room (Number, required)
    x StartTime (DateTime, required)
    x EndTime (DateTime, required)

x Criar uma exception de BusyRoomException
 
x Configurar o bd, que será o sqlite mesmo
    x Configurar o UpdateAt automatico

x Instalar e configurar o MediatR

x Repository
    x Criar a interface IMeetRepository
        x Método AddMeet (Recebe por param o tipo RegisterMeetCommand e é void)
        X Método ListMeet (retornar List de MeetEntity)
    x Criar um MeetRepository que herda IMeetRepository
        x Configurar o contexto
        x No método AddMeet
            x No try tenho que verificar usando o método Any do EF se o número do Room está sendo usado durante o StartTime e o EndTime
                x Se estiver sendo usado mando uma BusyRoomException
                x Senão eu só cadastro o meet
            x No catch eu coloco um throw generico
        x No método ListMeet
            x No try só busco por todas as reuniões cadastradas no bd
            x No catch eu coloco um throw generico

x Cadastrar nova reserva
    x Command (RegisterMeetCommand) que já deve está criado
    X Handler (RegisterMeetCommandHandler)
        X Ele esperar receber do tipo RegisterMeetCommand e não retornar nada
        x Chama o método AddMeet do Repository, passando os valores necessarios
    x Controller (MeetController => RegisterMeet)
        x Configurar a controller
        x Na controller espera receber do tipo RegisterMeetCommand
        x No try
            x O send do tipo RegisterMeetCommand
            x Dando tudo certo, retornar um 200, informando que o cadastro foi feito com sucesso
        x No catch de BusyRoomException
            x Retornar um erro de 409 referente a conflito com a mensagem "Sala ocupada durante esse periodo, tente outra sala ou um outro horário"
        x No catch generico
            x Retornar um badRequest

x Listar as reservas criadas
    x Query (ListAllMeetQuery)
        x Retornar List de MeetEntity
    x Handler (ListAllMeetQueryHandler)
        x Espera receber ListAllMeetQuery e retornar List de MeetEntity
        x Chama o método ListMeet do repository
    x Controller (MeetController => ListAllMeet)
        x No try
            x No send envia o tipo ListAllMeetQuery
            x Dando tudo certo retornar 200 com a lista de reunião
        x No catch generico
            x Retornar um badRequest

x Configurar a injeção de dependência

x Swagger

x Teste XUnit
    x Mokar o mediatR
    x Inicializar o controller e o mock
    x Testar Controllers
        x Testar o ListAllMeet com retorno 200
            x Criar lista de MeetEntity
            x Fazer o setup do mock do MediatR ele tem que retornar uma lista de MeetEntity
            x Chama o Controller
            x Verifica se o retorno é 200
            x Verifica se a lista é igual a lista criada
            x Verifica se com o .verify se o método foi chamado só uma vez

        x Testar o ListAllMeet com retorno 400
            x Fazer o setup do mock do MediatR ele tem que retornar uma exception generica
            x Chama o Controller com o método ListAllMeet
            x Verifica se o retorno é 400

        x Testar o RegisterMeet com retorno 200
            x Criar um RegisterMeetCommand que será o objeto a ser cadastrado
            x Fazer o setup do mock do MediatR ele tem que retornar null
            x Chama o Controller com o método RegisterMeet passando o RegisterMeetCommand
            x Verifica se o retorno é 200
            x Verifica se o método foi chamado só uma vez

        x Testar o RegisterMeet com retorno 409
            x Fazer o setup do mock do MediatR ele tem que retornar uma BusyRoomException
            x Chama o Controller com o método RegisterMeet passando o RegisterMeetCommand
            x Verifica se o retorno é 409 com a mensagem "Sala ocupada durante esse periodo, tente outra sala ou um outro horário"

        x Testar o RegisterMeet com retorno 400
            x Fazer o setup do mock do MediatR ele tem que retornar uma exception generica
            x Chama o Controller com o método RegisterMeet passando o RegisterMeetCommand
            x Verifica se o retorno é 400            

    - Testar handlers (Planejar)
