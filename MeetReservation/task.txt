x Criar um projeto .NET de API chamado meet-reservation

x Criar o BasEntity
    x Id (GUID)
    x CreateAt (Datetime)
    x UpdateAt (Datetime)

x Criar a class de RegisterMeetCommand
    x Responsible (String)
    x Room (Number)
    x StartTime (DateTime)
    x EndTime (DateTime)

x Criar a MeetEntity que herda de BasEntity
    x Responsible (String, required)
    x Room (Number, required)
    x StartTime (DateTime, required)
    x EndTime (DateTime, required)

x Criar uma exception de BusyRoomException
 
x Configurar o bd, que será o sqlite mesmo
    x Configurar o UpdateAt automatico

x Instalar e configurar o MediatR

x Repository
    x Criar a interface IMeetRepository
        x Método AddMeet (Recebe por param o tipo RegisterMeetCommand e é void)
        X Método ListMeet (retornar List de MeetEntity)
    x Criar um MeetRepository que herda IMeetRepository
        x Configurar o contexto
        x No método AddMeet
            x No try tenho que verificar usando o método Any do EF se o número do Room está sendo usado durante o StartTime e o EndTime
                x Se estiver sendo usado mando uma BusyRoomException
                x Senão eu só cadastro o meet
            x No catch eu coloco um throw generico
        x No método ListMeet
            x No try só busco por todas as reuniões cadastradas no bd
            x No catch eu coloco um throw generico

x Cadastrar nova reserva
    x Command (RegisterMeetCommand) que já deve está criado
    X Handler (RegisterMeetCommandHandler)
        X Ele esperar receber do tipo RegisterMeetCommand e não retornar nada
        x Chama o método AddMeet do Repository, passando os valores necessarios
    x Controller (MeetController => RegisterMeet)
        x Configurar a controller
        x Na controller espera receber do tipo RegisterMeetCommand
        x No try
            x O send do tipo RegisterMeetCommand
            x Dando tudo certo, retornar um 200, informando que o cadastro foi feito com sucesso
        x No catch de BusyRoomException
            x Retornar um erro de 409 referente a conflito com a mensagem "Sala ocupada durante esse periodo, tente outra sala ou um outro horário"
        x No catch generico
            x Retornar um badRequest

x Listar as reservas criadas
    x Query (ListAllMeetQuery)
        x Retornar List de MeetEntity
    x Handler (ListAllMeetQueryHandler)
        x Espera receber ListAllMeetQuery e retornar List de MeetEntity
        x Chama o método ListMeet do repository
    x Controller (MeetController => ListAllMeet)
        x No try
            x No send envia o tipo ListAllMeetQuery
            x Dando tudo certo retornar 200 com a lista de reunião
        x No catch generico
            x Retornar um badRequest

x Configurar a injeção de dependência

x Swagger

- Teste manual
    - Ao atualizar um dado ver se o update atualizou

    - Cadastro de controller bem sucedido
        - Cadastrar 2 reuniões em horarios diferentes com valores certos deve retornar tudo certo
        - Cadastrar 2 reunião em horario iguais mas com o número da sala diferente

    - Cadastro de controller com BusyRoomException
        - Cadastrar uma sala em um horario já cadastrado daquela sala

    - Listar reuniões
        - Chamar o método ListAllMeet da Controller

- Testes XUnit
    - Cadastro de controller sem os dados obrigatorios (Tenho que mapear se consigo fazer isso funcionar)
        - Enviar usando o theory parametros sempre faltando um dado requerido do RegisterMeetCommand
        - Ele tem que chamar a função RegisterMeet da controller
        - Em todos os casos tem que dar erro e ver se retornar a mensagem de erro correta.